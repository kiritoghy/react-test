{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","locale","TextArea","Input","Title","Typography","weekday","App","props","onChange","e","target","value","setState","onChange2","result","onDateChange","date","dateString","onClick","strings","state","split","info","format","day","index","i","length","toString","message","success","onCopy","copy","error","style","textAlign","gutter","span","offset","className","level","rows","allowClear","placeholder","this","autoSize","minRows","maxRows","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"sYAQAA,IAAOC,OAAO,S,IACPC,EAAYC,IAAZD,SACCE,EAAUC,IAAVD,MACJE,EAAU,CAAC,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,qBAAM,sBA8GpCC,E,kDA3Gb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQRC,SAAW,SAACC,GACPA,GAAKA,EAAEC,QAAUD,EAAEC,OAAOC,OAC3B,EAAKC,SAAS,CACZD,MAAMF,EAAEC,OAAOC,SAZH,EAgBlBE,UAAY,SAACJ,GACRA,GAAKA,EAAEC,QAAUD,EAAEC,OAAOC,OAC3B,EAAKC,SAAS,CACZE,OAAOL,EAAEC,OAAOC,SAnBJ,EAwBlBI,aAAe,SAACC,EAAMC,GACpB,EAAKL,SAAS,CACZI,KAAKA,KA1BS,EA8BlBE,QAAU,WACR,IAAIC,EAAU,EAAKC,MAAMT,MAAMU,MAAM,MACjCC,EAAO,GACXA,GAAQ,EAAKF,MAAMJ,KAAKO,OAAO,cAAgBlB,EAAQN,IAAO,EAAKqB,MAAMJ,MAAMQ,OAAU,KACzFF,GAAQ,wCAER,IADA,IAAIG,EAAQ,EACJC,EAAI,EAAGA,EAAIP,EAAQQ,SAAUD,EAChCP,EAAQO,GAAGC,OAAS,GAAKR,EAAQO,GAAGC,OAAS,KAC9CL,GAAQG,EAAMG,WAAa,SAAMT,EAAQO,GAAK,KAC9CD,KAGJH,GAAQ,8CAAWG,EAAM,GAAGG,WAAW,iBACvC,EAAKhB,SAAS,CAACE,OAAOQ,IACtBO,IAAQC,QAAQ,6BA5CA,EA+ClBC,OAAS,WACJC,IAAK,EAAKZ,MAAMN,QAAQe,IAAQC,QAAQ,4BACtCD,IAAQI,MAAM,iEA/CnB,EAAKb,MAAQ,CACXT,MAAM,GACNG,OAAO,GACPE,KAAMjB,OALQ,E,qDAqDhB,OACE,yBAAKmC,MAAO,CACVC,UAAW,SAEX,kBAAC,IAAD,CAAKC,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACnB,kBAACnC,EAAD,CAAOoC,UAAU,MAAMC,MAAO,GAA9B,8BAKN,kBAAC,IAAD,CAAKJ,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACrB,kBAACrC,EAAD,CACAwC,KAAM,GACNC,YAAU,EACVC,YAAY,mDACZnC,SAAYoC,KAAKpC,SACjBqC,SAAU,CAAEC,QAAS,GAAIC,QAAS,QAItC,kBAAC,IAAD,CAAKX,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACrB,kBAAC,IAAD,CACE9B,SAAUoC,KAAK7B,aACf4B,YAAc,oCAGlB,kBAAC,IAAD,CAAKN,KAAM,GAAIC,OAAQ,GACnB,kBAAC,IAAD,CAAQU,KAAK,UAAU9B,QAAS0B,KAAK1B,SAArC,kBAGN,kBAAC,IAAD,CAAKkB,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACrB,kBAACrC,EAAD,CACAwC,KAAM,GACNC,YAAU,EACVC,YAAY,yDACZhC,MAAOiC,KAAKxB,MAAMN,OAClBN,SAAYoC,KAAK/B,UACjBgC,SAAU,CAAEC,QAAS,GAAIC,QAAS,OAGpC,kBAAC,IAAD,CAAKV,KAAM,GAAIC,OAAQ,GACnB,kBAAC,IAAD,CAAQU,KAAK,UAAU9B,QAAS0B,KAAKb,QAArC,+C,GAnGIkB,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLkC,QAAQlC,MAAMA,EAAMJ,c","file":"static/js/main.c83439b7.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Input, Button, message, Typography  } from 'antd';\r\nimport { DatePicker } from 'antd';\r\nimport copy from 'copy-to-clipboard';\r\nimport moment from 'moment';\r\nimport 'moment/locale/zh-cn';\r\nimport './App.css';\r\n\r\nmoment.locale('zh-cn');\r\nconst {TextArea} = Input;\r\nconst { Title } = Typography;\r\nlet weekday = [\"星期日\",\"星期一\",\"星期二\",\"星期三\",\"星期四\",\"星期五\",\"星期六\"]\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      value:'',\r\n      result:'',\r\n      date: moment()\r\n    }\r\n  }\r\n\r\n  onChange = (e) => {\r\n    if(e && e.target && e.target.value){\r\n      this.setState({\r\n        value:e.target.value\r\n      })\r\n    }\r\n  }\r\n  onChange2 = (e) => {\r\n    if(e && e.target && e.target.value){\r\n      this.setState({\r\n        result:e.target.value\r\n      })\r\n    }\r\n  }\r\n\r\n  onDateChange = (date, dateString) => {\r\n    this.setState({\r\n      date:date\r\n    })\r\n  }\r\n\r\n  onClick = () =>{\r\n    let strings = this.state.value.split('\\n')\r\n    let info = '';\r\n    info += this.state.date.format(\"YYYY-MM-DD\") + weekday[moment(this.state.date).day()]  + '\\n';\r\n    info += '签到时间20:00-20:30\\n';\r\n    let index = 1;\r\n    for(let i = 0; i < strings.length; ++i){\r\n      if(strings[i].length > 0 && strings[i].length < 10){\r\n        info += index.toString() + \"、\" + strings[i] + '\\n';\r\n        index++;\r\n      }\r\n    }\r\n    info += '签到结束，实到'+(index-1).toString()+'人。\\n';\r\n    this.setState({result:info})\r\n    message.success('转换成功')\r\n  }\r\n\r\n  onCopy = () =>{\r\n    if(copy(this.state.result))message.success('复制成功');\r\n    else message.error('复制失败，请手动复制');\r\n  }\r\n\r\n  render() {\r\n    return(\r\n      <div style={{\r\n        textAlign: \"left\",\r\n      }}>\r\n        <Row gutter={[16,16]}>\r\n          <Col span={12} offset={6}>\r\n              <Title className=\"App\" level={2}>\r\n                签到转换 \r\n              </Title>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16,16]}>\r\n          <Col span={12} offset={6}>\r\n            <TextArea \r\n            rows={15} \r\n            allowClear\r\n            placeholder=\"请输入签到的人员\"\r\n            onChange = {this.onChange}\r\n            autoSize={{ minRows: 15, maxRows: 15 }}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16,16]}>\r\n          <Col span={12} offset={6}>\r\n            <DatePicker \r\n              onChange={this.onDateChange} \r\n              placeholder = \"请选择日期\"\r\n            />\r\n          </Col>\r\n          <Col span={12} offset={6}>\r\n              <Button type=\"primary\" onClick={this.onClick}>转换</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row gutter={[16,16]}>\r\n          <Col span={12} offset={6}>\r\n            <TextArea \r\n            rows={15} \r\n            allowClear\r\n            placeholder=\"转换结果将在此显示\"\r\n            value={this.state.result}\r\n            onChange = {this.onChange2}\r\n            autoSize={{ minRows: 15, maxRows: 15 }}\r\n            />\r\n          </Col>\r\n          <Col span={12} offset={6}>\r\n              <Button type=\"primary\" onClick={this.onCopy}>复制到剪贴板</Button>\r\n          </Col>\r\n        </Row>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}