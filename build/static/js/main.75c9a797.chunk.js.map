{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","Title","Typography","App","props","onChange","e","target","value","setState","onChange2","result","onClick","strings","state","split","console","log","info","index","i","length","toString","message","success","style","textAlign","gutter","span","offset","className","rows","allowClear","placeholder","this","type","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"oVAIOA,G,OAAYC,IAAZD,UACCE,EAAUC,IAAVD,MAsFOE,E,kDAnFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAORC,SAAW,SAACC,GACPA,GAAKA,EAAEC,QAAUD,EAAEC,OAAOC,OAC3B,EAAKC,SAAS,CACZD,MAAMF,EAAEC,OAAOC,SAXH,EAelBE,UAAY,SAACJ,GACRA,GAAKA,EAAEC,QAAUD,EAAEC,OAAOC,OAC3B,EAAKC,SAAS,CACZE,OAAOL,EAAEC,OAAOC,SAlBJ,EAuBlBI,QAAU,WACR,IAAIC,EAAU,EAAKC,MAAMN,MAAMO,MAAM,MACrCC,QAAQC,IAAIJ,GAGZ,IAFA,IAAIK,EAAO,GACPC,EAAQ,EACJC,EAAI,EAAGA,EAAIP,EAAQQ,SAAUD,EAChCP,EAAQO,GAAGC,OAAS,GAAKR,EAAQO,GAAGC,OAAS,KAC9CH,GAAQC,EAAMG,WAAa,SAAMT,EAAQO,GAAK,KAC9CD,KAGJ,EAAKV,SAAS,CAACE,OAAOO,IACtBK,IAAQC,QAAQ,6BAjChB,EAAKV,MAAQ,CACXN,MAAM,GACNG,OAAO,IAJO,E,qDAuChB,OACE,yBAAKc,MAAO,CACVC,UAAW,SAEX,kBAAC,IAAD,CAAKC,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACnB,kBAAC5B,EAAD,CAAO6B,UAAU,OAAjB,8BAKN,kBAAC,IAAD,CAAKH,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACrB,kBAAC9B,EAAD,CACAgC,KAAM,GACNC,YAAU,EACVC,YAAY,mDACZ5B,SAAY6B,KAAK7B,aAIrB,kBAAC,IAAD,CAAKsB,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACnB,kBAAC,IAAD,CAAQM,KAAK,UAAUvB,QAASsB,KAAKtB,SAArC,kBAGN,kBAAC,IAAD,CAAKe,OAAQ,CAAC,GAAG,KACf,kBAAC,IAAD,CAAKC,KAAM,GAAIC,OAAQ,GACrB,kBAAC9B,EAAD,aACAgC,KAAM,GACNC,YAAU,EACVC,YAAY,yDACZ5B,SAAY6B,KAAK7B,SACjBG,MAAO0B,KAAKpB,MAAMH,QALlB,WAMYuB,KAAKxB,mB,GA1EX0B,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAM/B,c","file":"static/js/main.75c9a797.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Input, Button, message, Typography  } from 'antd';\nimport './App.css';\n\nconst {TextArea} = Input;\nconst { Title } = Typography;\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      value:'',\n      result:''\n    }\n  }\n\n  onChange = (e) => {\n    if(e && e.target && e.target.value){\n      this.setState({\n        value:e.target.value\n      })\n    }\n  }\n  onChange2 = (e) => {\n    if(e && e.target && e.target.value){\n      this.setState({\n        result:e.target.value\n      })\n    }\n  }\n\n  onClick = () =>{\n    let strings = this.state.value.split('\\n')\n    console.log(strings)\n    let info = '';\n    let index = 1;\n    for(let i = 0; i < strings.length; ++i){\n      if(strings[i].length > 0 && strings[i].length < 10){\n        info += index.toString() + \"、\" + strings[i] + '\\n';\n        index++;\n      }\n    }\n    this.setState({result:info})\n    message.success('转换成功')\n  }\n\n  render() {\n    return(\n      <div style={{\n        textAlign: \"left\",\n      }}>\n        <Row gutter={[16,16]}>\n          <Col span={12} offset={6}>\n              <Title className=\"App\">\n                签到转换 \n              </Title>\n          </Col>\n        </Row>\n        <Row gutter={[16,16]}>\n          <Col span={12} offset={6}>\n            <TextArea \n            rows={15} \n            allowClear\n            placeholder=\"请输入签到的人员\"\n            onChange = {this.onChange}\n            />\n          </Col>\n        </Row>\n        <Row gutter={[16,16]}>\n          <Col span={12} offset={6}>\n              <Button type=\"primary\" onClick={this.onClick}>转换</Button>\n          </Col>\n        </Row>\n        <Row gutter={[16,16]}>\n          <Col span={12} offset={6}>\n            <TextArea \n            rows={15} \n            allowClear\n            placeholder=\"转换结果将在此显示\"\n            onChange = {this.onChange}\n            value={this.state.result}\n            onChange = {this.onChange2}\n            />\n          </Col>\n        </Row>\n        \n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}